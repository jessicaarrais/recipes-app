{"version":3,"sources":["serviceWorker.js","resolvers.tsx","components/styled-button/Button.tsx","components/Icon.tsx","components/AccountSettingsButton.tsx","components/DeleteUserButton.tsx","components/avatar/Avatar.tsx","components/UploadAvatar.tsx","components/editable-text-area/EditableTextArea.tsx","components/UserSettings.tsx","pages/AccountSettingsPage.tsx","components/ingredient/DeleteIngredientButton.tsx","components/ingredient/IngredientCheckbox.tsx","components/ingredient/IngredientText.tsx","components/ingredient/Ingredient.tsx","components/recipe/CreateIngredientButton.tsx","components/recipe/CreateInstructionButton.tsx","components/recipe/DeleteRecipeButton.tsx","components/instruction/DeleteInstructionButton.tsx","components/instruction/InstructionStep.tsx","components/instruction/InstructionText.tsx","components/instruction/Instruction.tsx","components/recipe/RecipeTitle.tsx","components/recipe/Recipe.tsx","components/cookbook/CreateRecipeButton.tsx","components/cookbook/Cookbook.tsx","pages/loggedin/HomeLoggedInPage.tsx","utils/urlParser.tsx","components/search/Search.tsx","components/navigation-bar/NavigationBar.tsx","pages/recipe-page/RecipePage.tsx","components/UserProfileButton.tsx","pages/user-profile-page/UserProfilePage.tsx","pages/loggedin/LoggedInRoute.tsx","components/login-signup/Login.tsx","components/login-signup/Signup.tsx","pages/loggedout/HomeLoggedOutPage.tsx","pages/loggedout/LoggedOutRoute.tsx","index.tsx","assets/img/chinchilla.jpg"],"names":["Boolean","window","location","hostname","match","typeDefs","gql","Button","props","type","className","actionType","disabled","onClick","handleOnClick","children","Icon","icon","AccountSettingsButton","to","DELETE_USER","DeleteUserButton","client","useApolloClient","history","useHistory","useMutation","onCompleted","localStorage","clear","cache","reset","push","deleteUser","loading","error","message","Avatar","alt","src","uri","standartAvatar","UPLOAD_AVATAR","UploadAvatar","useState","errorMessage","setErrorMessage","data","uploadAvatar","success","htmlFor","id","onChange","target","validity","files","file","valid","variables","style","width","EditableTextArea","text","setNewText","isEditing","setIsEditing","update","onSubmit","semanticalType","ref","focus","value","e","onKeyDown","key","onBlur","tabIndex","UPDATE_USER","UserSettings","updateUser","username","AccountSettingsPage","DELETE_INGREDIENT","DeleteIngredientButton","deleteIngredient","UPDATE_INGREDIENT","IngredientCheckbox","updateIngredient","checked","isChecked","ingredientId","recipeId","IngredientText","INGREDIENT_FRAGMENT","Ingredient","isShowingDeleteIngredientButton","setIsShowingDeleteIngredientButton","onMouseOver","onMouseLeave","CREATE_INGREDIENT","CreateIngredientButton","createIngredient","CREATE_INSTRUCTION","CreateInstructionButton","createInstruction","step","DELETE_RECIPE","DeleteRecipeButton","deleteRecipe","DELETE_INSTRUCTION","DeleteInstructionButton","deleteInstruction","UPDATE_INSTRUCTION","InstructionStep","updateInstruction","instructionId","InstructionText","Instruction","isShowingDeleteInstructionButton","setIsShowingDeleteInstructionButton","UPDATE_RECIPE","RecipeTitle","updateRecipe","title","cookbookId","RECIPE_FRAGMENT","Recipe","ingredients","map","ingredient","instructions","instruction","CREATE_RECIPE","CreateRecipeButton","createRecipe","Cookbook","recipes","recipe","HomeLoggedInPage","urlParser","trim","replace","toLowerCase","SEARCH_RECIPES","Search","searchValue","setSearchValue","placeholder","SearchResponse","useParams","useQuery","searchRecipes","length","titleURL","NavigationBar","rightItems","RECIPE","RecipePage","UserProfileButton","GET_USER","UserProfilePage","user","avatar","cookbook","COOKBOOK_FRAGMENT","GET_COOKBOOK","LoggedInRoute","me","exact","path","render","component","LOGIN","Login","emailInputLogin","setemailInputLogin","passwordInputLogin","setPasswordInputLogin","login","setItem","token","preventDefault","email","password","name","PasswordValidation","CREATE_USER","Signup","emailInputSignup","setEmailInputSignup","usernameInputSignup","setUsernameInputSignup","passwordInputSignup","setPasswordInputSignup","confirmPasswordInputSignup","setConfirmPasswordInputSignup","signup","passwordValidation","passwordRegex","RegExp","standart","test","invalid","validatePassword","confirmPasswordValidation","confirmPassword","validateConfirmPassword","HomeLoggedOutPage","setLogin","signin","setSignin","LoggedOutRoute","IS_LOGGED_IN","uploadLink","createUploadLink","authMiddleware","ApolloLink","operation","forward","setContext","headers","authorization","getItem","InMemoryCache","typePolicies","fields","merge","incoming","ApolloClient","link","concat","resolvers","LandingPage","isShowingArrowUp","setIsShowingArrowUp","handleScroll","scrollY","useEffect","addEventListener","removeEventListener","scrollTo","createBrowserHistory","basename","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.18eb70f9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import gql from 'graphql-tag';\n\nexport const typeDefs = gql`\n  extend type Query {\n    isLoggedIn: Boolean!\n    username: String\n  }\n`;\n","import React, { ButtonHTMLAttributes } from 'react';\nimport './button.css';\n\ninterface Props {\n  type?: ButtonHTMLAttributes<HTMLButtonElement>['type'];\n  children?: ButtonHTMLAttributes<HTMLButtonElement>['children'];\n  actionType: 'default' | 'primary' | 'secondary' | 'danger';\n  disabled?: boolean;\n  handleOnClick?: ButtonHTMLAttributes<HTMLButtonElement>['onClick'];\n}\n\nfunction Button(props: Props) {\n  return (\n    <button\n      type={props.type}\n      className={`base ${props.actionType}`}\n      disabled={props.disabled}\n      onClick={props.handleOnClick}\n    >\n      {props.children}\n    </button>\n  );\n}\n\nexport default Button;\n","import React from 'react';\n\ninterface Props {\n  icon:\n    | 'menu'\n    | 'create'\n    | 'add'\n    | 'delete'\n    | 'clear'\n    | 'delete_forever'\n    | 'filter_list'\n    | 'sort'\n    | 'search'\n    | 'favorite_border'\n    | 'keyboard_arrow_up';\n}\n\nfunction Icon(props: Props) {\n  return <span className=\"material-icons\">{props.icon}</span>;\n}\n\nexport default Icon;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from './styled-button/Button';\nimport Icon from './Icon';\n\nfunction AccountSettingsButton() {\n  return (\n    <Link to=\"/account-settings\">\n      <Button actionType=\"default\">\n        <Icon icon=\"menu\" />\n      </Button>\n    </Link>\n  );\n}\n\nexport default AccountSettingsButton;\n","import React from 'react';\nimport { gql, useMutation, useApolloClient } from '@apollo/client';\nimport { useHistory } from 'react-router';\nimport Button from './styled-button/Button';\nimport Icon from './Icon';\n\nconst DELETE_USER = gql`\n  mutation DeleteUser {\n    deleteUser {\n      me {\n        id\n        email\n      }\n    }\n  }\n`;\n\nfunction DeleteUserButton() {\n  const client = useApolloClient();\n  const history = useHistory();\n  const [deleteUser, { loading, error }] = useMutation(DELETE_USER, {\n    onCompleted() {\n      localStorage.clear();\n      client.cache.reset();\n      history.push('/');\n    },\n  });\n\n  if (loading) return <h1>Loading...</h1>;\n  if (error) return <h1>An error has occurred. ${error.message}</h1>;\n\n  return (\n    <div>\n      <Button type=\"button\" actionType=\"danger\" handleOnClick={() => deleteUser()}>\n        <Icon icon=\"delete_forever\" />\n        delete account\n      </Button>\n    </div>\n  );\n}\n\nexport default DeleteUserButton;\n","import React from 'react';\nimport standartAvatar from './../../assets/img/chinchilla.jpg';\nimport './avatar.css';\n\ninterface Props {\n  uri?: string;\n}\n\nfunction Avatar(props: Props) {\n  return <img alt=\"user's avatar\" src={props.uri ? props.uri : standartAvatar} />;\n}\n\nexport default Avatar;\n","import React, { ChangeEvent, useState } from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport Avatar from './avatar/Avatar';\n\nconst UPLOAD_AVATAR = gql`\n  mutation UploadAvatar($file: Upload!) {\n    uploadAvatar(file: $file) {\n      success\n      message\n      me {\n        id\n        avatar {\n          uri\n        }\n      }\n    }\n  }\n`;\n\ninterface Props {\n  uri?: string;\n}\n\nfunction UploadAvatar(props: Props) {\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const [uploadAvatar, { loading, error }] = useMutation(UPLOAD_AVATAR, {\n    onCompleted(data) {\n      if (!data.uploadAvatar.success) {\n        setErrorMessage(data.uploadAvatar.message);\n      }\n    },\n  });\n\n  const handleUploadAvatar = ({\n    target: { validity, files },\n  }: ChangeEvent<HTMLInputElement>): void => {\n    const file = files?.[0];\n\n    if (validity.valid) uploadAvatar({ variables: { file } });\n  };\n\n  if (loading) return <h1>Loading...</h1>;\n  if (error) return <h1>An error has occurred. ${error.message}</h1>;\n\n  return (\n    <div>\n      <label htmlFor=\"avatar\">Upload photo</label>\n      <input id=\"avatar\" type=\"file\" onChange={handleUploadAvatar} />\n      {errorMessage && <p>{errorMessage}</p>}\n      <div style={{ width: '100px' }}>\n        <Avatar uri={props.uri} />\n      </div>\n    </div>\n  );\n}\n\nexport default UploadAvatar;\n","import React, { useState } from 'react';\nimport './editable-text-area.css';\n\ninterface Props {\n  semanticalType: 'h2' | 'p';\n  children: string;\n  onSubmit(text: string): void;\n}\n\nfunction EditableTextArea(props: Props) {\n  const [text, setNewText] = useState(props.children);\n  const [isEditing, setIsEditing] = useState(false);\n\n  const update = (text: string): void => {\n    setIsEditing(false);\n    if (text !== props.children) {\n      props.onSubmit(text);\n    }\n  };\n\n  return (\n    <>\n      {isEditing ? (\n        <input\n          className={`editable-input-${props.semanticalType}`}\n          ref={(ref) => {\n            ref && ref.focus();\n          }}\n          type=\"text\"\n          value={text}\n          onChange={(e) => setNewText(e.target.value)}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') update(text);\n          }}\n          onBlur={() => update(text)}\n        />\n      ) : (\n        <span\n          className={`editable-span-${props.semanticalType}`}\n          tabIndex={0}\n          onClick={() => {\n            setIsEditing(true);\n            setNewText(props.children);\n          }}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') {\n              setIsEditing(true);\n              setNewText(props.children);\n            }\n          }}\n        >\n          {props.children}\n        </span>\n      )}\n    </>\n  );\n}\n\nexport default EditableTextArea;\n","import React, { useState } from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport DeleteUserButton from './DeleteUserButton';\nimport UploadAvatar from './UploadAvatar';\nimport EditableTextArea from './editable-text-area/EditableTextArea';\n\nconst UPDATE_USER = gql`\n  mutation UpdateUser($username: String) {\n    updateUser(username: $username) {\n      success\n      message\n      me {\n        id\n        username\n      }\n    }\n  }\n`;\n\ninterface Props {\n  username: string;\n  uri?: string;\n}\n\nfunction UserSettings(props: Props) {\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const [updateUser, { error }] = useMutation(UPDATE_USER, {\n    onCompleted(data) {\n      if (!data.updateUser.success) {\n        setErrorMessage(data.updateUser.message);\n      } else {\n        setErrorMessage(null);\n      }\n    },\n  });\n\n  const onSubmit = (username: string): void => {\n    updateUser({ variables: { username } });\n  };\n\n  if (error) return <h1>An error has occurred. ${error.message}</h1>;\n\n  return (\n    <>\n      <EditableTextArea semanticalType=\"p\" onSubmit={onSubmit}>\n        {props.username}\n      </EditableTextArea>\n      <p>{errorMessage}</p>\n      <UploadAvatar uri={props.uri} />\n      <DeleteUserButton />\n    </>\n  );\n}\n\nexport default UserSettings;\n","import React from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport { useHistory } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport Button from '../components/styled-button/Button';\nimport UserSettings from '../components/UserSettings';\n\ninterface Props {\n  username: string;\n  uri?: string;\n}\n\nfunction AccountSettingsPage(props: Props) {\n  const client = useApolloClient();\n  const history = useHistory();\n\n  const handleLogout = () => {\n    localStorage.clear();\n    client.cache.reset();\n    history.push('/');\n  };\n\n  return (\n    <>\n      <Link to=\"/\">Back to Home</Link>\n      <Button type=\"button\" actionType=\"default\" handleOnClick={handleLogout}>\n        Logout\n      </Button>\n      <UserSettings username={props.username} uri={props.uri} />\n    </>\n  );\n}\n\nexport default AccountSettingsPage;\n","import React from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport Button from '../styled-button/Button';\nimport Icon from '../Icon';\n\nconst DELETE_INGREDIENT = gql`\n  mutation DeleteIngredient($ingredientId: ID!, $recipeId: ID!) {\n    deleteIngredient(ingredientId: $ingredientId, recipeId: $recipeId) {\n      recipe {\n        id\n        ingredients {\n          id\n        }\n      }\n    }\n  }\n`;\n\ninterface Props {\n  ingredientId: number;\n  recipeId: number;\n}\n\nfunction DeleteIngredientButton(props: Props) {\n  const [deleteIngredient, { error }] = useMutation(DELETE_INGREDIENT);\n\n  if (error) return <h1>An error has occurred. ${error.message}</h1>;\n\n  return (\n    <Button\n      type=\"button\"\n      actionType=\"danger\"\n      handleOnClick={() => deleteIngredient({ variables: props })}\n    >\n      <Icon icon=\"clear\" />\n    </Button>\n  );\n}\n\nexport default DeleteIngredientButton;\n","import React from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport './ingredient-checkbox.css';\n\nconst UPDATE_INGREDIENT = gql`\n  mutation UpdateIngredient(\n    $ingredientId: ID!\n    $text: String\n    $isChecked: Boolean\n    $recipeId: ID!\n  ) {\n    updateIngredient(\n      ingredientId: $ingredientId\n      text: $text\n      isChecked: $isChecked\n      recipeId: $recipeId\n    ) {\n      ingredient {\n        id\n        recipeId\n        text\n        isChecked\n      }\n    }\n  }\n`;\n\ninterface Props {\n  ingredientId: number;\n  isChecked: boolean;\n  recipeId: number;\n}\n\nfunction IngredientCheckbox(props: Props) {\n  const [updateIngredient, { error }] = useMutation(UPDATE_INGREDIENT);\n\n  const handleUpdateIngredientCheckbox = (isChecked: boolean): void => {\n    if (isChecked !== props.isChecked) {\n      updateIngredient({\n        variables: {\n          ingredientId: props.ingredientId,\n          isChecked,\n          recipeId: props.recipeId,\n        },\n      });\n    }\n  };\n\n  if (error) return <h1>An error has occurred. ${error.message}</h1>;\n\n  return (\n    <input\n      className=\"ingredient-checkbox\"\n      type=\"checkbox\"\n      checked={props.isChecked}\n      onChange={(e) => {\n        handleUpdateIngredientCheckbox(e.target.checked);\n      }}\n    />\n  );\n}\n\nexport default IngredientCheckbox;\n","import React from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport EditableTextArea from '../editable-text-area/EditableTextArea';\n\nconst UPDATE_INGREDIENT = gql`\n  mutation UpdateIngredient(\n    $ingredientId: ID!\n    $text: String\n    $isChecked: Boolean\n    $recipeId: ID!\n  ) {\n    updateIngredient(\n      ingredientId: $ingredientId\n      text: $text\n      isChecked: $isChecked\n      recipeId: $recipeId\n    ) {\n      ingredient {\n        id\n        recipeId\n        text\n        isChecked\n      }\n    }\n  }\n`;\n\ninterface Props {\n  ingredientId: number;\n  text: string;\n  recipeId: number;\n}\n\nfunction IngredientText(props: Props) {\n  const [updateIngredient, { error }] = useMutation(UPDATE_INGREDIENT);\n\n  const onSubmit = (text: string): void => {\n    updateIngredient({\n      variables: { ingredientId: props.ingredientId, text, recipeId: props.recipeId },\n    });\n  };\n\n  if (error) return <h1>An error has occurred. ${error.message}</h1>;\n\n  return (\n    <EditableTextArea semanticalType=\"p\" onSubmit={onSubmit}>\n      {props.text}\n    </EditableTextArea>\n  );\n}\n\nexport default IngredientText;\n","import React, { useState } from 'react';\nimport { gql } from '@apollo/client';\nimport DeleteIngredientButton from './DeleteIngredientButton';\nimport IngredientCheckbox from './IngredientCheckbox';\nimport IngredientText from './IngredientText';\nimport './ingredient.css';\n\nexport const INGREDIENT_FRAGMENT = gql`\n  fragment IngredientFragment on Ingredient {\n    __typename\n    id\n    recipeId\n    text\n    isChecked\n  }\n`;\n\ninterface Props {\n  id: number;\n  recipeId: number;\n  isChecked: boolean;\n  text: string;\n}\n\nfunction Ingredient(props: Props) {\n  const [isShowingDeleteIngredientButton, setIsShowingDeleteIngredientButton] = useState(\n    false\n  );\n\n  return (\n    <li\n      className=\"ingredient-list\"\n      onMouseOver={() => setIsShowingDeleteIngredientButton(true)}\n      onMouseLeave={() => setIsShowingDeleteIngredientButton(false)}\n    >\n      <IngredientCheckbox\n        ingredientId={props.id}\n        isChecked={props.isChecked}\n        recipeId={props.recipeId}\n      />\n      <IngredientText\n        ingredientId={props.id}\n        text={props.text}\n        recipeId={props.recipeId}\n      />\n      {isShowingDeleteIngredientButton && (\n        <div>\n          <DeleteIngredientButton ingredientId={props.id} recipeId={props.recipeId} />\n        </div>\n      )}\n    </li>\n  );\n}\n\nexport default Ingredient;\n","import React from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport Button from '../styled-button/Button';\nimport Icon from '../Icon';\nimport { INGREDIENT_FRAGMENT } from '../ingredient/Ingredient';\n\nconst CREATE_INGREDIENT = gql`\n  mutation CreateIngredient($text: String, $isChecked: Boolean, $recipeId: ID!) {\n    createIngredient(text: $text, isChecked: $isChecked, recipeId: $recipeId) {\n      success\n      message\n      recipe {\n        id\n        title\n        ingredients {\n          ...IngredientFragment\n        }\n      }\n    }\n  }\n  ${INGREDIENT_FRAGMENT}\n`;\n\ninterface Props {\n  recipeId: number;\n}\n\nfunction CreateIngredientButton(props: Props) {\n  const [createIngredient] = useMutation(CREATE_INGREDIENT);\n\n  return (\n    <Button\n      type=\"button\"\n      actionType=\"primary\"\n      handleOnClick={() =>\n        createIngredient({\n          variables: {\n            recipeId: props.recipeId,\n            text: 'New Ingredient',\n            isChecked: false,\n          },\n        })\n      }\n    >\n      <Icon icon=\"add\" />\n      add ingredient\n    </Button>\n  );\n}\n\nexport default CreateIngredientButton;\n","import React from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport Button from '../styled-button/Button';\nimport Icon from '../Icon';\n\nconst CREATE_INSTRUCTION = gql`\n  mutation CreateInstruction($step: String, $text: String, $recipeId: ID!) {\n    createInstruction(step: $step, text: $text, recipeId: $recipeId) {\n      recipe {\n        id\n        instructions {\n          id\n          recipeId\n          step\n          text\n        }\n      }\n    }\n  }\n`;\n\ninterface Props {\n  recipeId: number;\n}\n\nfunction CreateInstructionButton(props: Props) {\n  const [createInstruction] = useMutation(CREATE_INSTRUCTION);\n\n  return (\n    <Button\n      type=\"button\"\n      actionType=\"primary\"\n      handleOnClick={() =>\n        createInstruction({\n          variables: { recipeId: props.recipeId, step: 'Step: ', text: 'Instruction' },\n        })\n      }\n    >\n      <Icon icon=\"add\" />\n      add instruction\n    </Button>\n  );\n}\n\nexport default CreateInstructionButton;\n","import React from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport Button from '../styled-button/Button';\nimport Icon from '../Icon';\n\nconst DELETE_RECIPE = gql`\n  mutation DeleteRecipe($recipeId: ID!, $cookbookId: ID!) {\n    deleteRecipe(recipeId: $recipeId, cookbookId: $cookbookId) {\n      cookbook {\n        id\n        recipes {\n          id\n        }\n      }\n    }\n  }\n`;\n\ninterface Props {\n  recipeId: number;\n  cookbookId: number;\n}\n\nfunction DeleteRecipeButton(props: Props) {\n  const [deleteRecipe] = useMutation(DELETE_RECIPE);\n\n  return (\n    <Button\n      type=\"button\"\n      actionType=\"danger\"\n      handleOnClick={() => deleteRecipe({ variables: props })}\n    >\n      <Icon icon=\"delete\" />\n      delete recipe\n    </Button>\n  );\n}\n\nexport default DeleteRecipeButton;\n","import React from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport Button from '../styled-button/Button';\nimport Icon from '../Icon';\n\nconst DELETE_INSTRUCTION = gql`\n  mutation DeleteInstruction($instructionId: ID!, $recipeId: ID!) {\n    deleteInstruction(instructionId: $instructionId, recipeId: $recipeId) {\n      recipe {\n        id\n        instructions {\n          id\n        }\n      }\n    }\n  }\n`;\n\ninterface Props {\n  instructionId: number;\n  recipeId: number;\n}\n\nfunction DeleteInstructionButton(props: Props) {\n  const [deleteInstruction, { error }] = useMutation(DELETE_INSTRUCTION);\n\n  if (error) return <h1>An error has occurred. ${error.message}</h1>;\n\n  return (\n    <Button\n      type=\"button\"\n      actionType=\"danger\"\n      handleOnClick={() => deleteInstruction({ variables: props })}\n    >\n      <Icon icon=\"clear\" />\n    </Button>\n  );\n}\n\nexport default DeleteInstructionButton;\n","import React from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport EditableTextArea from '../editable-text-area/EditableTextArea';\n\nconst UPDATE_INSTRUCTION = gql`\n  mutation UpdateInstruction(\n    $instructionId: ID!\n    $step: String\n    $text: String\n    $recipeId: ID!\n  ) {\n    updateInstruction(\n      instructionId: $instructionId\n      step: $step\n      text: $text\n      recipeId: $recipeId\n    ) {\n      instruction {\n        id\n        step\n      }\n    }\n  }\n`;\n\ninterface Props {\n  instructionId: number;\n  recipeId: number;\n  step: string;\n}\n\nfunction InstructionStep(props: Props) {\n  const [updateInstruction] = useMutation(UPDATE_INSTRUCTION);\n\n  const onSubmit = (step: string): void => {\n    updateInstruction({\n      variables: {\n        instructionId: props.instructionId,\n        step,\n        recipeId: props.recipeId,\n      },\n    });\n  };\n\n  return (\n    <EditableTextArea semanticalType=\"p\" onSubmit={onSubmit}>\n      {props.step}\n    </EditableTextArea>\n  );\n}\n\nexport default InstructionStep;\n","import React from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport EditableTextArea from '../editable-text-area/EditableTextArea';\n\nconst UPDATE_INSTRUCTION = gql`\n  mutation UpdateInstruction(\n    $instructionId: ID!\n    $step: String\n    $text: String\n    $recipeId: ID!\n  ) {\n    updateInstruction(\n      instructionId: $instructionId\n      step: $step\n      text: $text\n      recipeId: $recipeId\n    ) {\n      instruction {\n        id\n        text\n      }\n    }\n  }\n`;\n\ninterface Props {\n  instructionId: number;\n  recipeId: number;\n  text: string;\n}\n\nfunction InstructionText(props: Props) {\n  const [updateInstruction] = useMutation(UPDATE_INSTRUCTION);\n\n  const onSubmit = (text: string) => {\n    updateInstruction({\n      variables: {\n        instructionId: props.instructionId,\n        text,\n        recipeId: props.recipeId,\n      },\n    });\n  };\n\n  return (\n    <EditableTextArea semanticalType=\"p\" onSubmit={onSubmit}>\n      {props.text}\n    </EditableTextArea>\n  );\n}\n\nexport default InstructionText;\n","import React, { useState } from 'react';\nimport DeleteInstructionButton from './DeleteInstructionButton';\nimport InstructionStep from './InstructionStep';\nimport InstructionText from './InstructionText';\nimport './instruction.css';\n\ninterface Props {\n  id: number;\n  recipeId: number;\n  step: string;\n  text: string;\n}\n\nfunction Instruction(props: Props) {\n  const [\n    isShowingDeleteInstructionButton,\n    setIsShowingDeleteInstructionButton,\n  ] = useState(false);\n\n  return (\n    <li\n      className=\"instruction-list\"\n      onMouseOver={() => setIsShowingDeleteInstructionButton(true)}\n      onMouseLeave={() => setIsShowingDeleteInstructionButton(false)}\n    >\n      <div className=\"instructions-container\">\n        <InstructionStep\n          instructionId={props.id}\n          recipeId={props.recipeId}\n          step={props.step}\n        />\n        <InstructionText\n          instructionId={props.id}\n          recipeId={props.recipeId}\n          text={props.text}\n        />\n      </div>\n      {isShowingDeleteInstructionButton && (\n        <div>\n          <DeleteInstructionButton instructionId={props.id} recipeId={props.recipeId} />\n        </div>\n      )}\n    </li>\n  );\n}\n\nexport default Instruction;\n","import React from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport EditableTextArea from '../editable-text-area/EditableTextArea';\nimport './recipe-title.css';\n\nconst UPDATE_RECIPE = gql`\n  mutation UpdateRecipe($recipeId: ID!, $title: String, $cookbookId: ID!) {\n    updateRecipe(recipeId: $recipeId, title: $title, cookbookId: $cookbookId) {\n      recipe {\n        id\n        title\n      }\n    }\n  }\n`;\n\ninterface Props {\n  id: number;\n  cookbookId: number;\n  title: string;\n}\n\nfunction RecipeTitle(props: Props) {\n  const [updateRecipe, { error }] = useMutation(UPDATE_RECIPE);\n\n  const onSubmit = (title: string) =>\n    updateRecipe({\n      variables: { recipeId: props.id, title, cookbookId: props.cookbookId },\n    });\n\n  if (error) return <h1>An error has occurred. ${error.message}</h1>;\n\n  return (\n    <div className=\"recipe-title-container\">\n      <EditableTextArea semanticalType=\"h2\" onSubmit={onSubmit}>\n        {props.title}\n      </EditableTextArea>\n    </div>\n  );\n}\n\nexport default RecipeTitle;\n","import React from 'react';\nimport { gql } from '@apollo/client';\nimport Button from '../styled-button/Button';\nimport CreateIngredientButton from './CreateIngredientButton';\nimport CreateInstructionButton from './CreateInstructionButton';\nimport DeleteRecipeButton from './DeleteRecipeButton';\nimport Icon from '../Icon';\nimport Ingredient, { INGREDIENT_FRAGMENT } from '../ingredient/Ingredient';\nimport Instruction from '../instruction/Instruction';\nimport RecipeTitle from './RecipeTitle';\nimport './recipe.css';\n\nexport const RECIPE_FRAGMENT = gql`\n  fragment RecipeFragment on Recipe {\n    __typename\n    id\n    cookbookId\n    title\n    ingredients {\n      ...IngredientFragment\n    }\n    instructions {\n      id\n      recipeId\n      step\n      text\n    }\n  }\n  ${INGREDIENT_FRAGMENT}\n`;\n\ninterface Props {\n  id: number;\n  cookbookId: number;\n  title: string;\n  ingredients: [];\n  instructions?: [];\n}\n\nfunction Recipe(props: Props) {\n  return (\n    <li className=\"recipe-li\">\n      <div className=\"recipe-header\">\n        <RecipeTitle id={props.id} cookbookId={props.cookbookId} title={props.title} />\n        <div>\n          <Button type=\"button\" actionType=\"secondary\">\n            <Icon icon=\"favorite_border\" />\n          </Button>\n        </div>\n      </div>\n      <ul>\n        {props.ingredients.map((ingredient: any) => (\n          <Ingredient\n            key={ingredient.id}\n            id={ingredient.id}\n            recipeId={ingredient.recipeId}\n            isChecked={ingredient.isChecked}\n            text={ingredient.text}\n          />\n        ))}\n      </ul>\n      {props.instructions && (\n        <ul>\n          {props.instructions.map((instruction: any) => (\n            <Instruction\n              key={instruction.id}\n              id={instruction.id}\n              recipeId={instruction.recipeId}\n              step={instruction.step}\n              text={instruction.text}\n            />\n          ))}\n        </ul>\n      )}\n      <div className=\"recipe-btns-container\">\n        <div className=\"create-todo-container\">\n          <CreateIngredientButton recipeId={props.id} />\n        </div>\n        <div className=\"create-instruction-container\">\n          <CreateInstructionButton recipeId={props.id} />\n        </div>\n        <div className=\"delete-recipe-container\">\n          <DeleteRecipeButton recipeId={props.id} cookbookId={props.cookbookId} />\n        </div>\n      </div>\n    </li>\n  );\n}\n\nexport default Recipe;\n","import React from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport Button from '../styled-button/Button';\nimport Icon from '../Icon';\nimport { RECIPE_FRAGMENT } from '../recipe/Recipe';\n\nconst CREATE_RECIPE = gql`\n  mutation CreateRecipe($title: String, $cookbookId: ID!) {\n    createRecipe(title: $title, cookbookId: $cookbookId) {\n      cookbook {\n        id\n        recipes {\n          ...RecipeFragment\n        }\n      }\n    }\n  }\n  ${RECIPE_FRAGMENT}\n`;\n\ninterface Props {\n  cookbookId: number;\n}\n\nfunction CreateRecipeButton(props: Props) {\n  const [createRecipe, { error }] = useMutation(CREATE_RECIPE);\n\n  if (error) return <h1>An error has occurred. ${error.message}</h1>;\n\n  return (\n    <Button\n      type=\"button\"\n      actionType=\"primary\"\n      handleOnClick={() =>\n        createRecipe({\n          variables: { title: 'Title', cookbookId: props.cookbookId },\n        })\n      }\n    >\n      <Icon icon=\"create\" />\n      New Recipe\n    </Button>\n  );\n}\n\nexport default CreateRecipeButton;\n","import React from 'react';\nimport Recipe from '../recipe/Recipe';\nimport CreateRecipeButton from './CreateRecipeButton';\nimport Button from '../styled-button/Button';\nimport Icon from '../Icon';\nimport './cookbook.css';\n\ninterface Props {\n  id: number;\n  recipes: [];\n}\n\nfunction Cookbook(props: Props) {\n  return (\n    <div>\n      <div className=\"notebook-header\">\n        <div className=\"create-sheet-container\">\n          <CreateRecipeButton cookbookId={props.id} />\n        </div>\n        <div className=\"notebook-list-organizers-container\">\n          <div className=\"filter-list-container\">\n            <Button type=\"button\" actionType=\"default\">\n              <Icon icon=\"filter_list\" />\n            </Button>\n          </div>\n          <div className=\"sort-list-container\">\n            <Button type=\"button\" actionType=\"default\">\n              <Icon icon=\"sort\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n      <ul className=\"notebook-ul\">\n        {props.recipes.map((recipe: any) => (\n          <Recipe\n            key={recipe.id}\n            id={recipe.id}\n            cookbookId={recipe.cookbookId}\n            title={recipe.title}\n            ingredients={recipe.ingredients}\n            instructions={recipe.instructions}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\nexport default Cookbook;\n","import React from 'react';\nimport Cookbook from '../../components/cookbook/Cookbook';\n\ninterface Props {\n  cookbookId: number;\n  recipes: [];\n}\n\nfunction HomeLoggedInPage(props: Props) {\n  return (\n    <div>\n      <Cookbook id={props.cookbookId} recipes={props.recipes} />\n    </div>\n  );\n}\n\nexport default HomeLoggedInPage;\n","export default function urlParser(value: string): string {\n  return value.trim().replace(/ /g, '-').toLowerCase();\n}\n","import React, { useState } from 'react';\nimport { useParams, useHistory, Link } from 'react-router-dom';\nimport { gql, useQuery } from '@apollo/client';\nimport Button from '../styled-button/Button';\nimport Icon from '../Icon';\nimport urlParser from '../../utils/urlParser';\nimport './search.css';\n\nconst SEARCH_RECIPES = gql`\n  query SearchRecipes($value: String) {\n    searchRecipes(value: $value) {\n      id\n      title\n    }\n  }\n`;\n\nexport function Search() {\n  const history = useHistory();\n  const [searchValue, setSearchValue] = useState('');\n\n  return (\n    <div className=\"search-container\">\n      <input\n        type=\"text\"\n        value={searchValue}\n        placeholder=\"Search Recipes\"\n        onChange={(e) => setSearchValue(e.target.value)}\n      />\n\n      <Button\n        type=\"button\"\n        actionType=\"secondary\"\n        disabled={searchValue === '' ? true : false}\n        handleOnClick={() => {\n          history.push(`/search/${searchValue}`);\n          setSearchValue('');\n        }}\n      >\n        <Icon icon=\"search\" />\n      </Button>\n    </div>\n  );\n}\n\nexport function SearchResponse() {\n  const { value } = useParams();\n\n  const { data, loading, error } = useQuery(SEARCH_RECIPES, {\n    variables: { value },\n  });\n\n  if (loading) return <h1>Loading...</h1>;\n  if (error) return <h1>An error has occurred. ${error.message}</h1>;\n\n  return data?.searchRecipes.length > 0 ? (\n    <ul>\n      {data.searchRecipes.map((recipe: any) => {\n        const titleURL = urlParser(recipe.title);\n        return (\n          <Link to={`/${titleURL}/${recipe.id}`} key={recipe.id}>\n            <li>\n              <h3>{recipe.title}</h3>\n            </li>\n          </Link>\n        );\n      })}\n    </ul>\n  ) : (\n    <p>Could not find a recipe</p>\n  );\n}\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Search } from '../search/Search';\nimport './navigationbar.css';\n\ninterface Props {\n  rightItems?: React.ReactNode;\n}\n\nfunction NavigationBar(props: Props) {\n  const history = useHistory();\n\n  return (\n    <>\n      <nav className=\"navbar\">\n        <div>\n          <span onClick={() => history.push('/')} />\n          <Search />\n        </div>\n        <div>{props.rightItems}</div>\n      </nav>\n      <div className=\"navbar-padding\" />\n    </>\n  );\n}\n\nexport default NavigationBar;\n","import React from 'react';\nimport { useParams } from 'react-router';\nimport { gql, useQuery } from '@apollo/client';\n\nconst RECIPE = gql`\n  query Recipe($recipeId: ID!) {\n    recipe(recipeId: $recipeId) {\n      id\n      title\n      ingredients {\n        id\n        text\n      }\n      instructions {\n        id\n        step\n        text\n      }\n    }\n  }\n`;\n\nfunction RecipePage() {\n  const { recipeId } = useParams();\n\n  const { data, loading, error } = useQuery(RECIPE, { variables: { recipeId } });\n\n  if (loading) return <h1>Loading...</h1>;\n  if (error) return <h1>An error has occurred. ${error.message}</h1>;\n\n  return (\n    <div>\n      <h2>{data?.recipe.title}</h2>\n      <h3>Ingredients</h3>\n      <ul>\n        {data?.recipe.ingredients.map((ingredient: { id: number; text: string }) => (\n          <li key={ingredient.id}>{ingredient.text}</li>\n        ))}\n      </ul>\n      <hr />\n      <h3>Instructions</h3>\n      {data?.recipe.instructions.map(\n        (instruction: { id: number; step: string; text: string }) => (\n          <div key={instruction.id}>\n            <p>{instruction.step}</p>\n            <p>{instruction.text}</p>\n          </div>\n        )\n      )}\n    </div>\n  );\n}\n\nexport default RecipePage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Avatar from './avatar/Avatar';\n\ninterface Props {\n  username: string;\n  uri?: string;\n}\n\nfunction UserProfileButton(props: Props) {\n  return (\n    <Link to={`/users/${props.username}`} className=\"nav-link\">\n      <span className=\"nav-span-username\">{props.username}</span>\n      <div className=\"nav-avatar\">\n        <Avatar uri={props.uri} />\n      </div>\n    </Link>\n  );\n}\n\nexport default UserProfileButton;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useParams } from 'react-router';\nimport { gql, useQuery } from '@apollo/client';\nimport Avatar from '../../components/avatar/Avatar';\nimport urlParser from '../../utils/urlParser';\nimport './user-profile-page.css';\n\nconst GET_USER = gql`\n  query User($username: String) {\n    user(username: $username) {\n      id\n      username\n      avatar {\n        uri\n      }\n      cookbook {\n        recipes {\n          id\n          title\n          ingredients {\n            id\n            text\n          }\n          instructions {\n            id\n            step\n            text\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction UserProfilePage() {\n  const { username } = useParams();\n\n  const { data, loading, error } = useQuery(GET_USER, { variables: { username } });\n\n  if (loading) return <h1>Loading...</h1>;\n  if (error) return <h1>An error has occurred. ${error.message}</h1>;\n\n  return data.user ? (\n    <div>\n      <h2>{data.user.username}</h2>\n      <div className=\"user-profile-avatar\">\n        <Avatar uri={data.user.avatar?.uri} />\n      </div>\n      <ul className=\"recipes\">\n        {data.user.cookbook.recipes.map((recipe: any) => {\n          const titleURL = urlParser(recipe.title);\n          return (\n            <Link to={`/${titleURL}/${recipe.id}`} key={recipe.id} className=\"recipe\">\n              <li>\n                <h3>{recipe.title}</h3>\n              </li>\n            </Link>\n          );\n        })}\n      </ul>\n    </div>\n  ) : (\n    <h3>User not found</h3>\n  );\n}\n\nexport default UserProfilePage;\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { gql, useQuery } from '@apollo/client';\nimport AccountSettingsButton from '../../components/AccountSettingsButton';\nimport AccountSettingsPage from '../AccountSettingsPage';\nimport HomeLoggedInPage from './HomeLoggedInPage';\nimport NavigationBar from '../../components/navigation-bar/NavigationBar';\nimport RecipePage from '../recipe-page/RecipePage';\nimport { RECIPE_FRAGMENT } from '../../components/recipe/Recipe';\nimport { SearchResponse } from '../../components/search/Search';\nimport UserProfileButton from '../../components/UserProfileButton';\nimport UserProfilePage from '../user-profile-page/UserProfilePage';\nimport './loggedin-route.css';\n\nexport const COOKBOOK_FRAGMENT = gql`\n  fragment CookbookFragment on Cookbook {\n    __typename\n    id\n    recipes {\n      ...RecipeFragment\n    }\n  }\n  ${RECIPE_FRAGMENT}\n`;\n\nexport const GET_COOKBOOK = gql`\n  query Me {\n    me {\n      id\n      username\n      avatar {\n        uri\n      }\n      cookbook {\n        ...CookbookFragment\n      }\n    }\n  }\n  ${COOKBOOK_FRAGMENT}\n`;\n\nfunction LoggedInRoute() {\n  const { data, loading, error } = useQuery(GET_COOKBOOK);\n\n  if (loading) return <h1>Loading...</h1>;\n  if (error) return <h1>An error has occurred. ${error.message}</h1>;\n\n  return (\n    <div className=\"body-loggedin\">\n      <NavigationBar\n        rightItems={\n          <>\n            <UserProfileButton username={data.me.username} uri={data.me.avatar?.uri} />\n            <AccountSettingsButton />\n          </>\n        }\n      />\n      <section className=\"loggedin-section\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <HomeLoggedInPage\n                cookbookId={data.me.cookbook.id}\n                recipes={data.me.cookbook.recipes}\n              />\n            )}\n          />\n          <Route\n            path=\"/account-settings\"\n            render={() => (\n              <AccountSettingsPage\n                username={data.me.username}\n                uri={data.me.avatar?.uri}\n              />\n            )}\n          />\n          <Route path=\"/users/:username\" component={UserProfilePage} />\n          <Route path=\"/search/:value\" component={SearchResponse} />\n          <Route path=\"/:recipeTitle/:recipeId\" component={RecipePage} />\n        </Switch>\n      </section>\n    </div>\n  );\n}\n\nexport default LoggedInRoute;\n","import React, { useState } from 'react';\nimport { gql, useMutation, useApolloClient } from '@apollo/client';\nimport Button from '../styled-button/Button';\nimport './login-signup.css';\n\nconst LOGIN = gql`\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      success\n      message\n      me {\n        token\n      }\n    }\n  }\n`;\n\nfunction Login() {\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [emailInputLogin, setemailInputLogin] = useState('');\n  const [passwordInputLogin, setPasswordInputLogin] = useState('');\n  const client = useApolloClient();\n\n  const [login, { error }] = useMutation(LOGIN, {\n    onCompleted(data) {\n      if (!data.login.success) {\n        setErrorMessage(data.login.message);\n        return;\n      }\n      localStorage.setItem('token', data.login.me.token);\n      client.cache.reset();\n    },\n  });\n\n  if (error) return <h1>An error has ocurred</h1>;\n\n  return (\n    <div className=\"login-signup-card\">\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          login({ variables: { email: emailInputLogin, password: passwordInputLogin } });\n        }}\n      >\n        <input\n          name=\"email\"\n          className=\"login-signup-input\"\n          placeholder=\"E-mail\"\n          value={emailInputLogin}\n          onChange={(e) => {\n            setemailInputLogin(e.target.value);\n          }}\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          className=\"login-signup-input\"\n          placeholder=\"Password\"\n          value={passwordInputLogin}\n          onChange={(e) => {\n            setPasswordInputLogin(e.target.value);\n          }}\n        />\n        <div className=\"login-signup-btn\">\n          <Button type=\"submit\" actionType=\"default\">\n            Login\n          </Button>\n        </div>\n      </form>\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { gql, useMutation, useApolloClient } from '@apollo/client';\nimport Button from '../styled-button/Button';\nimport './login-signup.css';\n\nconst CREATE_USER = gql`\n  mutation CreateUser(\n    $email: String!\n    $username: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    signup(\n      email: $email\n      username: $username\n      password: $password\n      confirmPassword: $confirmPassword\n    ) {\n      __typename\n      success\n      message\n      me {\n        username\n        token\n      }\n    }\n  }\n`;\n\nenum PasswordValidation {\n  standart = 'standart',\n  valid = 'valid',\n  invalid = 'invalid',\n}\n\nfunction Signup() {\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [emailInputSignup, setEmailInputSignup] = useState('');\n  const [usernameInputSignup, setUsernameInputSignup] = useState('');\n  const [passwordInputSignup, setPasswordInputSignup] = useState('');\n  const [confirmPasswordInputSignup, setConfirmPasswordInputSignup] = useState('');\n\n  const client = useApolloClient();\n\n  const [signup, { error }] = useMutation(CREATE_USER, {\n    onCompleted(data) {\n      if (!data.signup.success) {\n        setErrorMessage(data.signup.message);\n        return;\n      }\n      localStorage.setItem('token', data.signup.me.token);\n      client.cache.reset();\n    },\n  });\n\n  if (error) return <h1>An error has ocurred</h1>;\n  const passwordValidation = validatePassword(passwordInputSignup);\n  const confirmPasswordValidation = validateConfirmPassword(\n    confirmPasswordInputSignup,\n    passwordInputSignup\n  );\n\n  return (\n    <div className=\"login-signup-card\">\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          signup({\n            variables: {\n              email: emailInputSignup,\n              username: usernameInputSignup,\n              password: passwordInputSignup,\n              confirmPassword: confirmPasswordInputSignup,\n            },\n          });\n        }}\n      >\n        <input\n          className=\"login-signup-input\"\n          placeholder=\"E-mail\"\n          value={emailInputSignup}\n          onChange={(e) => setEmailInputSignup(e.target.value)}\n        />\n        <input\n          className=\"login-signup-input\"\n          placeholder=\"Username\"\n          value={usernameInputSignup}\n          onChange={(e) => setUsernameInputSignup(e.target.value)}\n        />\n        <div>\n          {passwordValidation === 'invalid' && (\n            <p className=\"error-message\">Invalid password format</p>\n          )}\n          <input\n            className={`login-signup-input ${passwordValidation}`}\n            type=\"password\"\n            placeholder=\"Password eg.: p@SSword2020\"\n            onChange={(e) => {\n              setPasswordInputSignup(e.target.value);\n            }}\n          />\n        </div>\n        <div>\n          {confirmPasswordValidation === 'invalid' && (\n            <p className=\"error-message\">Passwords do not match</p>\n          )}\n          <input\n            className={`login-signup-input ${confirmPasswordValidation}`}\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n            onChange={(e) => {\n              setConfirmPasswordInputSignup(e.target.value);\n            }}\n          />\n        </div>\n        <ul className=\"password-hint\">\n          Your password must:\n          <li>be betweem 8 and 12 characters;</li>\n          <li>contain at least 1 number;</li>\n          <li>contain at least 1 uppercase and lowercase letters of each.</li>\n        </ul>\n        <div className=\"login-signup-btn\">\n          <Button type=\"submit\" actionType=\"default\">\n            Signup\n          </Button>\n        </div>\n      </form>\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n    </div>\n  );\n}\n\nfunction validatePassword(password: string): PasswordValidation {\n  const passwordRegex = new RegExp(\n    '^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,12}$'\n  );\n  if (password.length < 8) {\n    return PasswordValidation.standart;\n  }\n  return passwordRegex.test(password)\n    ? PasswordValidation.valid\n    : PasswordValidation.invalid;\n}\n\nfunction validateConfirmPassword(\n  confirmPassword: string,\n  password: string\n): PasswordValidation {\n  if (confirmPassword.length < 8) {\n    return PasswordValidation.standart;\n  }\n  return confirmPassword !== password\n    ? PasswordValidation.invalid\n    : PasswordValidation.valid;\n}\n\nexport default Signup;\n","import React, { useState } from 'react';\nimport Button from '../../components/styled-button/Button';\nimport Login from '../../components/login-signup/Login';\nimport Signup from '../../components/login-signup/Signup';\n\nfunction HomeLoggedOutPage() {\n  const [login, setLogin] = useState(false);\n  const [signin, setSignin] = useState(false);\n\n  return (\n    <>\n      <h1>Cookbook</h1>\n      <div className=\"buttons\">\n        <div>\n          <Button\n            type=\"button\"\n            actionType=\"default\"\n            handleOnClick={() => {\n              setLogin(true);\n              setSignin(false);\n            }}\n          >\n            Login\n          </Button>\n        </div>\n        <div>\n          <Button\n            type=\"button\"\n            actionType=\"default\"\n            handleOnClick={() => {\n              setSignin(true);\n              setLogin(false);\n            }}\n          >\n            Signin\n          </Button>\n        </div>\n      </div>\n      <div>\n        {login && <Login />}\n        {signin && <Signup />}\n      </div>\n    </>\n  );\n}\n\nexport default HomeLoggedOutPage;\n","import React from 'react';\nimport HomeLoggedOutPage from './HomeLoggedOutPage';\nimport NavigationBar from '../../components/navigation-bar/NavigationBar';\nimport RecipePage from '../recipe-page/RecipePage';\nimport { Route, Switch } from 'react-router';\nimport { SearchResponse } from '../../components/search/Search';\nimport UserProfilePage from '../user-profile-page/UserProfilePage';\nimport './loggedout-route.css';\n\nfunction LoggedOutRoute() {\n  return (\n    <div className=\"body-loggedout\">\n      <NavigationBar />\n      <section className=\"loggedout-section\">\n        <Switch>\n          <Route exact path=\"/\" component={HomeLoggedOutPage} />\n          <Route path=\"/users/:username\" component={UserProfilePage} />\n          <Route path=\"/search/:value\" component={SearchResponse} />\n          <Route path=\"/:recipeTitle/:recipeId\" component={RecipePage} />\n        </Switch>\n      </section>\n    </div>\n  );\n}\n\nexport default LoggedOutRoute;\n","import * as serviceWorker from './serviceWorker';\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router';\nimport { createBrowserHistory } from 'history';\nimport {\n  ApolloClient,\n  ApolloLink,\n  ApolloProvider,\n  InMemoryCache,\n  gql,\n  useQuery,\n} from '@apollo/client';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { typeDefs } from './resolvers';\nimport LoggedInRoute from './pages/loggedin/LoggedInRoute';\nimport LoggedOutRoute from './pages/loggedout/LoggedOutRoute';\nimport Button from './components/styled-button/Button';\nimport Icon from './components/Icon';\nimport './index.css';\n\nconst IS_LOGGED_IN = gql`\n  query IsLoggedIn {\n    me {\n      id\n    }\n  }\n`;\n\nconst uploadLink = createUploadLink({\n  uri: 'https://rocky-oasis-65465.herokuapp.com/graphql',\n});\n// const uploadLink = createUploadLink({\n//   uri: 'http://localhost:4000/graphql',\n// });\n\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  operation.setContext(({ headers = {} }) => ({\n    headers: {\n      ...headers,\n      authorization: localStorage.getItem('token') || null,\n      'client-name': 'recipes-app',\n      'client-version': '1.0.0',\n    },\n  }));\n  return forward(operation);\n});\n\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Cookbook: {\n      fields: {\n        recipes: {\n          merge(existing = [], incoming: any[]) {\n            return incoming;\n          },\n        },\n      },\n    },\n    Recipe: {\n      fields: {\n        ingredients: {\n          merge(existing = [], incoming: any[]) {\n            return incoming;\n          },\n        },\n        instructions: {\n          merge(existing = [], incoming: any[]) {\n            return incoming;\n          },\n        },\n      },\n    },\n  },\n});\n\nconst client = new ApolloClient({\n  // typescript \"Argument of type 'ApolloLink' is not assignable to parameter of type 'ApolloLink | RequestHandler'.\" error being ignored on uploadLink\"\n  // @ts-ignore\n  link: authMiddleware.concat(uploadLink),\n  cache,\n  typeDefs,\n  resolvers: {},\n});\n\nfunction LandingPage() {\n  const [isShowingArrowUp, setIsShowingArrowUp] = useState('hidden');\n\n  const { data } = useQuery(IS_LOGGED_IN);\n\n  const handleScroll = () => {\n    if (window.scrollY <= 260) {\n      setIsShowingArrowUp('hidden');\n    } else {\n      setIsShowingArrowUp('showed');\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  });\n\n  return (\n    <>\n      {data?.me?.id ? <LoggedInRoute /> : <LoggedOutRoute />}\n      <div className={`back-to-top-icon ${isShowingArrowUp}`} title=\"back to top\">\n        <Button\n          type=\"button\"\n          actionType=\"default\"\n          handleOnClick={() => {\n            window.scrollTo(0, 0);\n          }}\n        >\n          <Icon icon=\"keyboard_arrow_up\" />\n        </Button>\n      </div>\n    </>\n  );\n}\n\nconst history = createBrowserHistory({ basename: '/recipes-app' });\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router history={history}>\n        <LandingPage />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/chinchilla.744b6572.jpg\";"],"sourceRoot":""}